// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	exception "user-simple-crud/pkg/exception"

	mock "github.com/stretchr/testify/mock"

	signature "user-simple-crud/pkg/signature"
)

// Signaturer is an autogenerated mock type for the Signaturer type
type Signaturer struct {
	mock.Mock
}

// CheckBscryptPasswordHash provides a mock function with given fields: password, hash
func (_m *Signaturer) CheckBscryptPasswordHash(password string, hash string) bool {
	ret := _m.Called(password, hash)

	if len(ret) == 0 {
		panic("no return value specified for CheckBscryptPasswordHash")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateJWT provides a mock function with given fields: username
func (_m *Signaturer) GenerateJWT(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashBscryptPassword provides a mock function with given fields: password
func (_m *Signaturer) HashBscryptPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashBscryptPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTCheck provides a mock function with given fields: token
func (_m *Signaturer) JWTCheck(token string) (*signature.JwtAuthenticationRes, *exception.Exception) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for JWTCheck")
	}

	var r0 *signature.JwtAuthenticationRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(string) (*signature.JwtAuthenticationRes, *exception.Exception)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *signature.JwtAuthenticationRes); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*signature.JwtAuthenticationRes)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *exception.Exception); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// SignHMAC512 provides a mock function with given fields: httpMethod, bodyJson, token
func (_m *Signaturer) SignHMAC512(httpMethod string, bodyJson string, token string) (string, error) {
	ret := _m.Called(httpMethod, bodyJson, token)

	if len(ret) == 0 {
		panic("no return value specified for SignHMAC512")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(httpMethod, bodyJson, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(httpMethod, bodyJson, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(httpMethod, bodyJson, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyHMAC512 provides a mock function with given fields: httpMethod, bodyJson, token, hash
func (_m *Signaturer) VerifyHMAC512(httpMethod string, bodyJson string, token string, hash string) (bool, *exception.Exception) {
	ret := _m.Called(httpMethod, bodyJson, token, hash)

	if len(ret) == 0 {
		panic("no return value specified for VerifyHMAC512")
	}

	var r0 bool
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(string, string, string, string) (bool, *exception.Exception)); ok {
		return rf(httpMethod, bodyJson, token, hash)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) bool); ok {
		r0 = rf(httpMethod, bodyJson, token, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) *exception.Exception); ok {
		r1 = rf(httpMethod, bodyJson, token, hash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// NewSignaturer creates a new instance of Signaturer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignaturer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Signaturer {
	mock := &Signaturer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
