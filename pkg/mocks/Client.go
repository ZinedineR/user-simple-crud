// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// DeleteJSON provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteJSON(_a0 string, _a1 map[string]string) (int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJSON")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) (int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Get(_a0 string, _a1 map[string]string, _a2 interface{}) (int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, interface{}) (int, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, interface{}) int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostJSON provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) PostJSON(_a0 string, _a1 interface{}, _a2 map[string]string, _a3 interface{}) (int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for PostJSON")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string, interface{}) (int, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string, interface{}) int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, map[string]string, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostJSONCallback provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Client) PostJSONCallback(_a0 string, _a1 interface{}, _a2 map[string]string, _a3 interface{}, _a4 string) (int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostJSONCallback")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string, interface{}, string) (int, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string, interface{}, string) int); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, map[string]string, interface{}, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutJSON provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) PutJSON(_a0 string, _a1 interface{}, _a2 map[string]string, _a3 interface{}) (int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for PutJSON")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string, interface{}) (int, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, map[string]string, interface{}) int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, map[string]string, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
