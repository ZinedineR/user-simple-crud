// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "user-simple-crud/internal/entity"
	exception "user-simple-crud/pkg/exception"

	mock "github.com/stretchr/testify/mock"

	model "user-simple-crud/internal/model"

	service "user-simple-crud/internal/services"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *UserService) Create(ctx context.Context, _a1 *entity.UserLogin) *exception.Exception {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserLogin) *exception.Exception); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserService) Delete(ctx context.Context, id string) *exception.Exception {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string) *exception.Exception); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *UserService) FindOne(ctx context.Context, id string) (*entity.User, *exception.Exception) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *entity.User
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, *exception.Exception)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *exception.Exception); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *UserService) List(ctx context.Context, req model.ListReq) (*service.ListUserResp, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *service.ListUserResp
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, model.ListReq) (*service.ListUserResp, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ListReq) *service.ListUserResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ListUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ListReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, _a1
func (_m *UserService) Login(ctx context.Context, _a1 *entity.UserLogin) (*service.UserLoginResponse, *exception.Exception) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *service.UserLoginResponse
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserLogin) (*service.UserLoginResponse, *exception.Exception)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserLogin) *service.UserLoginResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.UserLogin) *exception.Exception); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, _a2
func (_m *UserService) Update(ctx context.Context, id string, _a2 *entity.UserLogin) *exception.Exception {
	ret := _m.Called(ctx, id, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.UserLogin) *exception.Exception); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
